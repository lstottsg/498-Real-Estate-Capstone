#############################################
# PREDICT 498 #
# Real Estate Group #
#############################################

rm(list=ls())
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# LOAD PACKAGES AND DATA
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# load libraries but install them first
list.of.packages <- c(
  "car" 
  ,"missForest" #fill in missing values
  ,"Hmisc"
  ,"corrplot" #correlation plot
  ,"lattice" #quantile plots
  ,"leaps" # Crossfold validation for best subsets
  ,"MASS" # for qda and lda
  ,"gam" # for gam
  ,"class" # for knn
  ,"randomForest" #RF
  ,"xgboost" #gradient boosting
  ,"Matrix" #sparse.model.matrix
  ,"glmnet"
  ,"leaps"
  ,"pls"
  ,"reshape"
  ,"tibble"
  ,"tidyverse" # tidyverse is a wrapper that contains dplyr, ggplot, tidyr, readr and a bunch of other great Hadley stuff
  ,"survival"
  ,"OIsurv" # Automatically loads KMsurv - bmt example
  ,"ranger"
  ,"doBy"
  ,"rpart"
  ,"rpart.plot"
  ,"tree"
  ,"rattle"
  ,"caTools"
  ,"ROCR"
  ,"ResourceSelection"
  ,"corrgram"
  ,"MASS"
  ,"inTrees"
  ,"pROC"
  ,"pec"
)
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages,library, character.only=T)

#set working directory
setwd("C:/Users/lstottsg/Desktop/Laura School/Summer 2017/498/Data")

#import files
train <- read.csv("MLS_Train.csv")
test <- read.csv("MLS_Test.csv")

train$MonthListed <- as.factor(train$MonthListed)
train$Beds <- as.factor(train$Beds)
train$FullBaths <- as.factor(train$FullBaths)

test$MonthListed <- as.factor(test$MonthListed)
test$Beds <- as.factor(test$Beds)
test$FullBaths <- as.factor(test$FullBaths)

attach(train)

##########################################
# Variable Selection                     #
##########################################

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Variable Selection with Forward
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

mls_forward <- step(model1, data=train, direction="forward")

forward_model <- DaysListToPending ~ YearBuilt + TotalFinishedSF + Acreage + Beds + 
  OriginalListPrice + ListPrice + FullBaths + GarageSize.Cars + 
  LavsHalfBaths + PricePerSqFt + WaterAccess_ID + On_Lake_Michigan + 
  On_Pond + Condo_ID + Multi_Fam_ID + Well_Water_ID + Walk_Out_Basement_ID + 
  Finished_Basement_ID + Garage_ID + Concession_ID + Rental_ID + 
  HighAcreage_ID + GP_Schools + Other_Good_Schools + MonthListed + 
  ChangeInPrice + PercentPriceChange + pop_density + hh_density + 
  vacant + value_hunit_oo_medn + pct_pop_growth + pct_hh_growth + 
  MarketHealthIndex
#AIC = 4166728

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Variable Selection with Backward
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

mls_backward <- step(model1, data=train, direction="backward")

backward_model <- DaysListToPending ~ YearBuilt + TotalFinishedSF + Acreage + OriginalListPrice + 
  ListPrice + FullBaths + GarageSize.Cars + LavsHalfBaths + 
  PricePerSqFt + WaterAccess_ID + On_Lake_Michigan + On_Pond + 
  Condo_ID + Multi_Fam_ID + Well_Water_ID + Walk_Out_Basement_ID + 
  Finished_Basement_ID + Garage_ID + Concession_ID + Rental_ID + 
  HighAcreage_ID + GP_Schools + Other_Good_Schools + MonthListed + 
  ChangeInPrice + PercentPriceChange + pop_density + hh_density + 
  vacant + value_hunit_oo_medn + pct_pop_growth + pct_hh_growth + 
  MarketHealthIndex
#AIC = 4166728


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Variable Selection with Stepwise
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

mls_stepwise <- step(model1, data=train, direction="both")

stepwise_model <- DaysListToPending ~ YearBuilt + TotalFinishedSF + Acreage + OriginalListPrice + 
  ListPrice + FullBaths + GarageSize.Cars + LavsHalfBaths + 
  PricePerSqFt + WaterAccess_ID + On_Lake_Michigan + On_Pond + 
  Condo_ID + Multi_Fam_ID + Well_Water_ID + Walk_Out_Basement_ID + 
  Finished_Basement_ID + Garage_ID + Concession_ID + Rental_ID + 
  HighAcreage_ID + GP_Schools + Other_Good_Schools + MonthListed + 
  ChangeInPrice + PercentPriceChange + pop_density + hh_density + 
  vacant + value_hunit_oo_medn + pct_pop_growth + pct_hh_growth + 
  MarketHealthIndex
#AIC = 4166728

##########################################
# Modeling                               #
##########################################


# save all of our results into a data frame for comparison
prediction_results <- data.frame()

#~~~~~~~~~~~~~~
# Principal Components Regression
#~~~~~~~~~~~~~

# Ensure that the predictors are standardized
# compute the 10-fold CV error for each possible value of M (# of principal components)

# model
pcr.fit <- pcr(stepwise_model, data = train, scale = TRUE, validation = "CV")

summary(pcr.fit)

pcr.RMSEP <- RMSEP(pcr.fit, estimate="CV")
min_pc <- which.min(pcr.RMSEP$val)

# predict
pcr.pred <- predict(pcr.fit, newdata = test, ncomp = min_pc-1)

# error
pcr.error <- mean((test$DaysListToPending - pcr.pred)^2) # mean prediction error

# store results
model_results <- 
  data.frame(check.names = F
             ,"Model" = "PCR"
             ,"MPE" = pcr.error)

(prediction_results <- rbind(prediction_results,model_results))


#~~~~~~~~~~~~~~
# GBM
#~~~~~~~~~~~~~~


# model
model.boost <- gbm(stepwise_model, data = train, distribution = "gaussian", n.trees = 100, interaction.depth = 4)

# predict
yhat.boost <- predict(model.boost, newdata = test, n.trees = 100)


# error
boost.error <- mean((test$DaysListToPending - yhat.boost)^2) # mean prediction error

# store results
model_results <- 
  data.frame(check.names = F
             ,"Model" = "GBM"
             ,"MPE" = boost.error)

(prediction_results <- rbind(prediction_results,model_results))


#~~~~~~~~~~~~~~
#Random Forests
#~~~~~~~~~~~~~~

model.rf <- randomForest(stepwise_model, data = train, importance = T)

yhat.rf <- predict(model.rf, newdata = pred.data.valid)

# error
rf.error <- mean((y.valid - yhat.rf)^2) # mean prediction error

# store results
model_results <- 
  data.frame(check.names = F
             ,"Model" = "Random Forrest"
             ,"MPE" = rf.error)

(prediction_results <- rbind(prediction_results,model_results))



##########################################
#        SURVIVAL ANALYSIS               #
##########################################

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Cox Proportional Hazards Model
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Fit Cox Model with Stepwise Selection Variables

cox_fit <- coxph(Surv(train$DaysListToPending)~YearBuilt + TotalFinishedSF + Acreage + OriginalListPrice + 
                   ListPrice + FullBaths + GarageSize.Cars + LavsHalfBaths + 
                   PricePerSqFt + WaterAccess_ID + On_Lake_Michigan + On_Pond + 
                   Multi_Fam_ID + Well_Water_ID + Walk_Out_Basement_ID + 
                   Finished_Basement_ID + Garage_ID + Concession_ID + Rental_ID + 
                   HighAcreage_ID + Other_Good_Schools + MonthListed + 
                   ChangeInPrice + PercentPriceChange + pop_density + hh_density + 
                   vacant + value_hunit_oo_medn + pct_pop_growth + pct_hh_growth + 
                   MarketHealthIndex
                 ,data = train, model=TRUE, y=TRUE)
summary(cox_fit)

#calculate linear predicted on test data
lp_pred <- predict(cox_fit,type="lp", newdata=test)


install.packages("pec")
library(pec)

###################################################################################################  HERE'S MY PROBLEM FUNCTION!!!
pred_prob <- predictSurvProb(cox_fit, newdata=test, times=c(7))
################################################################################################### 

#alternate option if predictSurvProb doesn't work
#go week by week...

#Baseline Function
base <- basehaz(cox_fit)
base

#Base value H0 at 0 days
pred.val_0 <- 0.01628630*exp(lp_pred)

#Base value H0 at 7 days
pred.val_7 <- 0.18721032*exp(lp_pred)

#Base value H0 at 14 days
pred.val_14 <- 0.36393079*exp(lp_pred)

#Base value H0 at 21 days
pred.val_21 <- 0.50303606*exp(lp_pred)

pred.target <- ifelse(pred.val>0.9,1,0)

target <- ifelse(test$DaysListToPending <= 0,0,1)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Random Forests Model
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ranger model
r_fit_mls <- ranger(form1,
                    data = train,
                    num.trees = 5,
                    importance = "permutation",
                    seed = 1)

# Average the survival models
pending_times <- r_fit_mls$unique.death.times
surv_prob <- data.frame(r_fit_mls$survival)
avg_prob <- sapply(surv_prob,mean)

# Plot the survival models for each patient
plot(r_fit_mls$unique.death.times,r_fit_mls$survival[1,], type = "l", 
     ylim = c(0,1),
     col = "red",
     xlab = "pending sale",
     ylab = "survival",
     main = "Pending Sale Curves")

for(n in c(2:137)){
  lines(r_fit_mls$unique.death.times, r_fit_mls$survival[n,], type = "l", col = "red")
}
lines(death_times, avg_prob, lwd = 2)
legend(100, 0.2, legend = c('Averages - black'))


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# FINAL RESULTS
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
